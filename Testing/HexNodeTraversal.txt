HexNodeTraversal
	
	Description
		HexNodeTraversal is used to iterate through the graph-like structure of the HexNodes. It keeps track of the root HexNode (where the traverse began), the current HexNode that is being traversed, and which linked node it is facing (see Global Direction). It provides movement through the Hexagon board by moving from HexNode to HexNode, layer by layer while preventing the traverse from leaving the boundaries.  It begins from the center and starts from the global position of 0 and works around that layer, then moves to the next layer until the entire graph has been traversed. It is an inside-out approach at traversing the Board. First layer will just be the middle so it will have the node 0. The second layer will have 0-5, the third layer will have 0-11, the fourth 0-17, the fifth 0-23, and in the case the board size is 7 the sixth layer will have 0-35. 

	Significance
		public HexNodeTraversal(HexNode root, int facing)
		This is the constructor for the HexNodeTraversal class. It simply creates a HexNodeTraversal object, initially sets the root HexNode and the direction to start the traversal.
		We will be testing this method so that we know whether or not the Board was properly traversed and each node was touched.
		
		public void go(int distanceOut, int distanceAround)
		Go is a method that traverses to a hexnode. Distance out being which layer it is on and distance around being the index of the node on that layer.
		Testing this method to ensure that we are reaching the proper layers and nodes.
        
	Testing Plan
		Functionality
		    
	    HexNodeTraversal
	        root is null 
	            assert that an exception is thrown. This test is just in case something goes wrong, we want the game to catch that it has a null value.
	        
	        root is the only node that exists and direction = 0 
	            assert that traversal returns the root. This is necessary because it is our boundary case in which the traversal will exit from.
	        
	        root has one element on the next layer 
	            assert that traversal returns the element in the next layer. The test ensures that we can navigate out atleast one layer.
	        
	        root has full next layer 
	            assert that the traversal returns the last element in the second layer. The test ensures that we can navigate a full next layer
	        
	        root has an item on the second layer
	            assert that the traversal returns the element on the last layer. the test ensures that we can navigate out many layers
	        
	   go
            root node is null
                assert that an exception is thrown. If no exception is thrown, then we can call the function on a null node which can lead to many bugs.
            
            distanceOut is greater than boardsize - 1
                assert that an exception is thrown. If no exception is thrown, then we can call the function on a null node which can lead to many bugs.
                
            distanceAround is greater than distanceout * 6
                assert that an exception is thrown. If no exception is thrown, then we can call the function on a null node which can lead to many bugs.
            
            distanceOut is 1, distanceAround is 0
                assert that the node returned is the first node in the next layer. this ensures that go can go out a layer and that it can find the first node in a layer.
                
            distanceOut is 3, distanceAround is 18
                assert that the node returned is the 18th node in the 3rd layer. this ensures that go can go out many layers and that it can find the last node in a layer.